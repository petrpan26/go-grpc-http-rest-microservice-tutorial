{"filter":false,"title":"server.go","tooltip":"/pkg/protocol/grpc/server.go","undoManager":{"mark":2,"position":2,"stack":[[{"start":{"row":0,"column":0},"end":{"row":42,"column":1},"action":"insert","lines":["package grpc","","import (","\t\"context\"","\t\"log\"","\t\"net\"","\t\"os\"","\t\"os/signal\"","","\t\"google.golang.org/grpc\"","","\t\"github.com/amsokol/go-grpc-http-rest-microservice-tutorial/pkg/api/v1\"",")","","// RunServer runs gRPC service to publish ToDo service","func RunServer(ctx context.Context, v1API v1.ToDoServiceServer, port string) error {","\tlisten, err := net.Listen(\"tcp\", \":\"+port)","\tif err != nil {","\t\treturn err","\t}","","\t// register service","\tserver := grpc.NewServer()","\tv1.RegisterToDoServiceServer(server, v1API)","","\t// graceful shutdown","\tc := make(chan os.Signal, 1)","\tsignal.Notify(c, os.Interrupt)","\tgo func() {","\t\tfor range c {","\t\t\t// sig is a ^C, handle it","\t\t\tlog.Println(\"shutting down gRPC server...\")","","\t\t\tserver.GracefulStop()","","\t\t\t<-ctx.Done()","\t\t}","\t}()","","\t// start gRPC server","\tlog.Println(\"starting gRPC server...\")","\treturn server.Serve(listen)","}"],"id":1}],[{"start":{"row":42,"column":1},"end":{"row":43,"column":0},"action":"insert","lines":["",""],"id":2,"ignore":true}],[{"start":{"row":10,"column":0},"end":{"row":11,"column":72},"action":"remove","lines":["","\t\"github.com/amsokol/go-grpc-http-rest-microservice-tutorial/pkg/api/v1\""],"id":3},{"start":{"row":9,"column":25},"end":{"row":10,"column":0},"action":"remove","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":124.5,"scrollleft":0,"selection":{"start":{"row":19,"column":20},"end":{"row":19,"column":20},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1602825315141,"hash":"b2b56c80f6ca749756673a4b2a649aaa36095cab"}
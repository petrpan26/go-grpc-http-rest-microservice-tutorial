{"filter":false,"title":"main.go","tooltip":"/pkg/cmd/client-grpc/main.go","undoManager":{"mark":2,"position":2,"stack":[[{"start":{"row":0,"column":0},"end":{"row":104,"column":1},"action":"insert","lines":["package main","","import (","\t\"context\"","\t\"flag\"","\t\"log\"","\t\"time\"","","\t\"github.com/golang/protobuf/ptypes\"","\t\"google.golang.org/grpc\"","","\t\"github.com/amsokol/go-grpc-http-rest-microservice-tutorial/pkg/api/v1\"",")","","const (","\t// apiVersion is version of API is provided by server","\tapiVersion = \"v1\"",")","","func main() {","\t// get configuration","\taddress := flag.String(\"server\", \"\", \"gRPC server in format host:port\")","\tflag.Parse()","","\t// Set up a connection to the server.","\tconn, err := grpc.Dial(*address, grpc.WithInsecure())","\tif err != nil {","\t\tlog.Fatalf(\"did not connect: %v\", err)","\t}","\tdefer conn.Close()","","\tc := v1.NewToDoServiceClient(conn)","","\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)","\tdefer cancel()","","\tt := time.Now().In(time.UTC)","\treminder, _ := ptypes.TimestampProto(t)","\tpfx := t.Format(time.RFC3339Nano)","","\t// Call Create","\treq1 := v1.CreateRequest{","\t\tApi: apiVersion,","\t\tToDo: &v1.ToDo{","\t\t\tTitle:       \"title (\" + pfx + \")\",","\t\t\tDescription: \"description (\" + pfx + \")\",","\t\t\tReminder:    reminder,","\t\t},","\t}","\tres1, err := c.Create(ctx, &req1)","\tif err != nil {","\t\tlog.Fatalf(\"Create failed: %v\", err)","\t}","\tlog.Printf(\"Create result: <%+v>\\n\\n\", res1)","","\tid := res1.Id","","\t// Read","\treq2 := v1.ReadRequest{","\t\tApi: apiVersion,","\t\tId:  id,","\t}","\tres2, err := c.Read(ctx, &req2)","\tif err != nil {","\t\tlog.Fatalf(\"Read failed: %v\", err)","\t}","\tlog.Printf(\"Read result: <%+v>\\n\\n\", res2)","","\t// Update","\treq3 := v1.UpdateRequest{","\t\tApi: apiVersion,","\t\tToDo: &v1.ToDo{","\t\t\tId:          res2.ToDo.Id,","\t\t\tTitle:       res2.ToDo.Title,","\t\t\tDescription: res2.ToDo.Description + \" + updated\",","\t\t\tReminder:    res2.ToDo.Reminder,","\t\t},","\t}","\tres3, err := c.Update(ctx, &req3)","\tif err != nil {","\t\tlog.Fatalf(\"Update failed: %v\", err)","\t}","\tlog.Printf(\"Update result: <%+v>\\n\\n\", res3)","","\t// Call ReadAll","\treq4 := v1.ReadAllRequest{","\t\tApi: apiVersion,","\t}","\tres4, err := c.ReadAll(ctx, &req4)","\tif err != nil {","\t\tlog.Fatalf(\"ReadAll failed: %v\", err)","\t}","\tlog.Printf(\"ReadAll result: <%+v>\\n\\n\", res4)","","\t// Delete","\treq5 := v1.DeleteRequest{","\t\tApi: apiVersion,","\t\tId:  id,","\t}","\tres5, err := c.Delete(ctx, &req5)","\tif err != nil {","\t\tlog.Fatalf(\"Delete failed: %v\", err)","\t}","\tlog.Printf(\"Delete result: <%+v>\\n\\n\", res5)","}"],"id":1}],[{"start":{"row":104,"column":1},"end":{"row":105,"column":0},"action":"insert","lines":["",""],"id":2,"ignore":true}],[{"start":{"row":11,"column":13},"end":{"row":11,"column":20},"action":"remove","lines":["amsokol"],"id":3},{"start":{"row":11,"column":13},"end":{"row":11,"column":14},"action":"insert","lines":["p"]},{"start":{"row":11,"column":14},"end":{"row":11,"column":15},"action":"insert","lines":["e"]},{"start":{"row":11,"column":15},"end":{"row":11,"column":16},"action":"insert","lines":["t"]},{"start":{"row":11,"column":16},"end":{"row":11,"column":17},"action":"insert","lines":["r"]},{"start":{"row":11,"column":17},"end":{"row":11,"column":18},"action":"insert","lines":["p"]},{"start":{"row":11,"column":18},"end":{"row":11,"column":19},"action":"insert","lines":["a"]},{"start":{"row":11,"column":19},"end":{"row":11,"column":20},"action":"insert","lines":["n"]},{"start":{"row":11,"column":20},"end":{"row":11,"column":21},"action":"insert","lines":["2"]},{"start":{"row":11,"column":21},"end":{"row":11,"column":22},"action":"insert","lines":["6"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":11,"column":22},"end":{"row":11,"column":22},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1602825840914,"hash":"2023db8ae2bdd18cec07f2e65826043b8edc10ba"}